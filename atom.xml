<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大华小屋</title>
  <subtitle>越过山丘 才发现无人等候</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dadahua.github.io/"/>
  <updated>2017-04-10T01:55:34.000Z</updated>
  <id>https://dadahua.github.io/</id>
  
  <author>
    <name>大华</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>五子棋-蓝牙或WiFi对战小游戏(已上架)</title>
    <link href="https://dadahua.github.io/2016/08/08/%E4%BA%94%E5%AD%90%E6%A3%8B-%E8%93%9D%E7%89%99%E6%88%96WiFi%E5%AF%B9%E6%88%98%E5%B0%8F%E6%B8%B8%E6%88%8F-%E5%B7%B2%E4%B8%8A%E6%9E%B6/"/>
    <id>https://dadahua.github.io/2016/08/08/五子棋-蓝牙或WiFi对战小游戏-已上架/</id>
    <published>2016-08-08T01:32:51.000Z</published>
    <updated>2017-04-10T01:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GoBangProject"><a href="#GoBangProject" class="headerlink" title="GoBangProject"></a>GoBangProject</h1><p>大华五子棋（已上架），该项目主要用到MutipeerConnectivity框架，用蓝牙或者局域网二人近场五子棋对战。</p>
<h3 id="一-项目介绍"><a href="#一-项目介绍" class="headerlink" title="一.项目介绍"></a>一.项目介绍</h3><h4 id="1-地址："><a href="#1-地址：" class="headerlink" title="1.地址："></a>1.地址：</h4><p>iTunes下载 ：<a href="https://itunes.apple.com/us/app/%E5%A4%A7%E5%8D%8E%E4%BA%94%E5%AD%90%E6%A3%8B/id1217483377?mt=8" target="_blank" rel="external">大华五子棋</a></p>
<p>github地址：<a href="https://github.com/dadahua/GoBangProject" target="_blank" rel="external">GobangProject</a></p>
<p>优酷操作视频：<a href="http://v.youku.com/v_show/id_XMjY1OTk5MzMzMg==.html?from=s1.8-1-1.2&amp;spm=a2h0k.8191407.0.0" target="_blank" rel="external">如何操作</a></p>
<h4 id="2-效果图："><a href="#2-效果图：" class="headerlink" title="2.效果图："></a>2.效果图：</h4><p><img src="http://upload-images.jianshu.io/upload_images/1352811-b16aa5446c4964c8.gif?imageMogr2/auto-orient/strip" alt="近场五子棋对战.gif"></p>
<h4 id="3-简介："><a href="#3-简介：" class="headerlink" title="3.简介："></a>3.简介：</h4><p>   该项目主要用到<a href="https://www.oschina.net/translate/intro-multipeer-connectivity-framework-ios-programming" target="_blank" rel="external">MutipeerConnectivity</a>框架，用<strong>蓝牙</strong>或者<strong>局域网</strong>二人近场五子棋对战。</p>
<h3 id="二-思路介绍"><a href="#二-思路介绍" class="headerlink" title="二.思路介绍"></a>二.思路介绍</h3><p>大概说下思路，具体看代码实现。</p>
<h4 id="1-画棋盘及落点"><a href="#1-画棋盘及落点" class="headerlink" title="1.画棋盘及落点"></a>1.画棋盘及落点</h4><p>   这个可以去慕课网看看这个视频:<a href="http://www.imooc.com/learn/646" target="_blank" rel="external">五子棋</a>，里面有详细的讲解，我对里面的进行了部分优化。比如怎么判断两点之间到底触摸的哪个点。</p>
<h4 id="2-悔棋，重来"><a href="#2-悔棋，重来" class="headerlink" title="2.悔棋，重来"></a>2.悔棋，重来</h4><p>   每个点都是一个对象，让后把对象放数组里面，进行删去，或者重置。</p>
<h4 id="3-人机模式"><a href="#3-人机模式" class="headerlink" title="3.人机模式"></a>3.人机模式</h4><p><img src="http://upload-images.jianshu.io/upload_images/1352811-1d9630f0550e20de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AI简介.png"></p>
<p>   这里的AI（人工智能）比较简单，这个算法可深可浅，此项目就是比较浅的，深的可以去看<a href="http://blog.csdn.net/onezeros/article/details/5542379" target="_blank" rel="external">算法</a>，此项目AI的大体思路是：</p>
<ul>
<li>先便利棋盘上面的点，找到AI的棋子有活四，死四的点，既下一步能形成5个点的落子点，找到就直接在此点落子。</li>
<li>如果没找到，就遍历玩家活四，或者死四的点，并在此进行落点进行防守，虽然活四没法防守。</li>
<li>然后这两个点都没找到的话，就直接找AI有形成活三，或者死三的点，进行落子进攻。</li>
<li>如果没找到，就找用户能形成活三，死三的点进行防守。就这样简单的进行交互。</li>
</ul>
<h4 id="4-人人模式"><a href="#4-人人模式" class="headerlink" title="4.人人模式"></a>4.人人模式</h4><pre><code>人人连机主要用Multipeer Connectivity框架进行近场通讯，现在有黑白玩家想要连接。
</code></pre><ul>
<li>那么双方必须打开蓝牙或者连接<strong>同一WiFi</strong>，接着至少要有一个设备作为浏览器(browser)，用来搜寻其他设备；</li>
<li>第二个设备必须是可发现的，它要声明它在这里，并且它想要与别的设备连接。换句话说，第二个设备需要宣传自己。<br>一般来说，两个设备都要宣传自己，但至少要有一个能浏览其他设备，从而建立连接。</li>
<li>接受邀请后双方建立连接。然后他们就可以基于session会话来传递数据消息数据（包括文本、图像以及可以转换为NSData对象的任何其他数据），流数据，资源数据。</li>
<li>此项目只需要传递消息数据即可。收到数据的代理方法默认会是在子线程上面，所以如果要更新UI等操作要用<strong>GCD线程回调到主线程</strong>上面来，否则会造成线程异常的情况。</li>
<li>传递的数据有棋子位置，棋子颜色，催促信号，语言文字等。为此我制定了简单的协议来区别这些数据。否则没有一套基本的标准，应用没办法判定这串数据是否是语言文字，还是棋子位置或者信号等。通讯协议表如下表所示。</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:center">头部</th>
<th style="text-align:center">内容</th>
<th style="text-align:center">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>语言文字</td>
<td style="text-align:center">~</td>
<td style="text-align:center">文字</td>
<td style="text-align:center">~你吃饭了吗？</td>
</tr>
<tr>
<td>黑子位置</td>
<td style="text-align:center">black</td>
<td style="text-align:center">棋子x,y坐标</td>
<td style="text-align:center">black0705</td>
</tr>
<tr>
<td>白子位置</td>
<td style="text-align:center">white</td>
<td style="text-align:center">棋子x,y坐标</td>
<td style="text-align:center">white0705</td>
</tr>
<tr>
<td>催促</td>
<td style="text-align:center">quikly</td>
<td style="text-align:center"></td>
<td style="text-align:center">quikly</td>
</tr>
<tr>
<td>悔棋</td>
<td style="text-align:center">undo</td>
<td style="text-align:center"></td>
<td style="text-align:center">undo</td>
</tr>
</tbody>
</table>
<h4 id="三-用到的三方和借鉴"><a href="#三-用到的三方和借鉴" class="headerlink" title="三.用到的三方和借鉴"></a>三.用到的三方和借鉴</h4><p>感谢下面作者<br>1.<a href="https://github.com/lilei644/LLSwitch" target="_blank" rel="external">LLSwitch</a><br>2.<a href="https://github.com/kubatruhlar/SFDraggableDialogView" target="_blank" rel="external">SFDraggableDialogView</a><br>3.<a href="http://www.imooc.com/learn/646" target="_blank" rel="external">慕课网五子棋</a></p>
<h4 id="四-结语"><a href="#四-结语" class="headerlink" title="四.结语"></a>四.结语</h4><p>如果能对你有帮助，就给个star或赞鼓励下，有什么没明白的欢迎留言交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GoBangProject&quot;&gt;&lt;a href=&quot;#GoBangProject&quot; class=&quot;headerlink&quot; title=&quot;GoBangProject&quot;&gt;&lt;/a&gt;GoBangProject&lt;/h1&gt;&lt;p&gt;大华五子棋（已上架），该项目主要用到Mutipeer
    
    </summary>
    
      <category term="hexo" scheme="https://dadahua.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://dadahua.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://dadahua.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>iOS UDP通讯</title>
    <link href="https://dadahua.github.io/2015/07/30/hello-world/"/>
    <id>https://dadahua.github.io/2015/07/30/hello-world/</id>
    <published>2015-07-29T23:56:29.000Z</published>
    <updated>2016-12-04T10:13:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近用<a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="external">GCDAsyncSocket</a>写个小东西，UDP通讯现在大多也使用GCD，很少用Runloop。然后粗略的了解了下UDP通讯。<br>它是比HTTP更加底层的通讯协议，特点是：<strong>传输快</strong>，<strong>无连接</strong>，系统开销也少。<br>更详细的基础知识：<a href="http://www.huangyibiao.com/archives/200" target="_blank" rel="external">Socket理论知识</a>。<br><strong>GCDAsyncUdpSocket</strong>这个框架很强大，你只需绑定端口通过<strong>代理</strong>接受消息，和对象方法发送消息。</p>
<h1 id="Demo："><a href="#Demo：" class="headerlink" title="Demo："></a>Demo：</h1><p><img src="http://upload-images.jianshu.io/upload_images/1352811-e0315f87f985620d.gif?imageMogr2/auto-orient/strip" alt="TCP.gif"></p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol>
<li>第一个界面作为服务器端，绑定<strong>端口号</strong>，监听端口号里面的消息。</li>
<li>第二个界面作为客户端发送消息，给服务器的<strong>端口号</strong>和局域网的<strong>IP</strong>地址，同时也绑定端口号，监听端口号里面消息。</li>
<li>消息发送后，服务器通过代理接受到消息，消息里面包括客户端的IP地址·端口·发送的内容。</li>
<li>服务器再在代理里面回复消息：“我收到了”，给客户端的<strong>IP</strong>地址·<strong>端口</strong>。</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul>
<li>服务端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 初始化socket</div><div class="line">-(void)initSocket &#123;</div><div class="line"></div><div class="line">self.title = @&quot;服务器&quot;;</div><div class="line">dispatch_queue_t dQueue = dispatch_queue_create(&quot;Server queue&quot;, NULL);</div><div class="line">receiveSocket = [[GCDAsyncUdpSocket alloc] initWithDelegate:self</div><div class="line">delegateQueue:dQueue];</div><div class="line">NSError *error;</div><div class="line"></div><div class="line">// 绑定一个端口(可选),如果不绑定端口, 那么就会随机产生一个随机的电脑唯一的端口</div><div class="line">// 端口数字范围(1024,2^16-1)</div><div class="line">[receiveSocket bindToPort:SERVERPORT error:&amp;error];</div><div class="line">if (error) &#123;</div><div class="line">NSLog(@&quot;服务器绑定失败&quot;);</div><div class="line">&#125;</div><div class="line">// 开始接收对方发来的消息</div><div class="line">[receiveSocket beginReceiving:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 接收消息代理</div><div class="line">-(void)udpSocket:(GCDAsyncUdpSocket *)sock didReceiveData:(NSData *)data fromAddress:(NSData *)address withFilterContext:(id)filterContext &#123;</div><div class="line"></div><div class="line">NSString *msg = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</div><div class="line">/**</div><div class="line">*  更新UI一定要到主线程去操作啊</div><div class="line">*/</div><div class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">self.textView.text = msg;</div><div class="line">&#125;);</div><div class="line">NSLog(@&quot;客户端ip地址--&gt;%@,port---&gt;%u,内容--&gt;%@&quot;,</div><div class="line">[GCDAsyncUdpSocket hostFromAddress:address],</div><div class="line">[GCDAsyncUdpSocket portFromAddress:address],</div><div class="line">msg);</div><div class="line"></div><div class="line">NSString *sendStr = @&quot;我收到了&quot;;</div><div class="line">NSData *sendData = [sendStr dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">// 该函数只是启动一次发送 它本身不进行数据的发送, 而是让后台的线程慢慢的发送 也就是说这个函数调用完成后,数据并没有立刻发送,异步发送</div><div class="line">[receiveSocket sendData:sendData toHost:[GCDAsyncUdpSocket hostFromAddress:address]</div><div class="line">port:[GCDAsyncUdpSocket portFromAddress:address]</div><div class="line">withTimeout:60</div><div class="line">tag:500];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>客户端<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-(void)viewDidLoad &#123;</div><div class="line">[super viewDidLoad];</div><div class="line">self.title = @&quot;客户端&quot;;</div><div class="line">dispatch_queue_t qQueue = dispatch_queue_create(&quot;Client queue&quot;, NULL);</div><div class="line">sendSocket = [[GCDAsyncUdpSocket alloc] initWithDelegate:self</div><div class="line">delegateQueue:qQueue];</div><div class="line">NSError *error;</div><div class="line">[sendSocket bindToPort:CLIENTPORT error:&amp;error];</div><div class="line">if (error) &#123;</div><div class="line">NSLog(@&quot;客户端绑定失败&quot;);</div><div class="line">&#125;</div><div class="line">[sendSocket beginReceiving:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 发送消息</div><div class="line">-(IBAction)sendMsgClick:(UIButton *)sender &#123;</div><div class="line">NSData *sendData = [msgTF.text dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">[sendSocket sendData:sendData</div><div class="line">toHost:ipTF.text</div><div class="line">port:SERVERPORT</div><div class="line">withTimeout:60</div><div class="line">tag:200];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 发送消息失败回调</div><div class="line">-(void)udpSocket:(GCDAsyncUdpSocket *)sock didNotSendDataWithTag:(long)tag dueToError:(NSError *)error &#123;</div><div class="line"></div><div class="line">if (tag == 200) &#123;</div><div class="line">NSLog(@&quot;client发送失败--&gt;%@&quot;,error);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 收到消息回调</div><div class="line">-(void)udpSocket:(GCDAsyncUdpSocket *)sock didReceiveData:(NSData *)data fromAddress:(NSData *)address withFilterContext:(id)filterContext &#123;</div><div class="line"></div><div class="line">NSString *receiveStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</div><div class="line">NSLog(@&quot;服务器ip地址---&gt;%@,host---%u,内容---&gt;%@&quot;,</div><div class="line">[GCDAsyncUdpSocket hostFromAddress:address],</div><div class="line">[GCDAsyncUdpSocket portFromAddress:address],</div><div class="line">receiveStr);</div><div class="line"></div><div class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">receiveLab.text = receiveStr;</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 关闭套接字，并销毁</div><div class="line">-(void)dealloc &#123;</div><div class="line"></div><div class="line">[sendSocket close];</div><div class="line">sendSocket = nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h1><ul>
<li>收到消息的回调方法里面，如果要更新UI的话，一定要切换到<strong>主线程</strong>里去实现操作。</li>
<li>向对方发消息，方法参数的端口号要是 <strong>对方</strong>绑定的端口号。</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;最近用&lt;a href=&quot;https://github.com/robbiehanson/CocoaAsyncSocket&quot; targ
    
    </summary>
    
      <category term="hexo" scheme="https://dadahua.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://dadahua.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://dadahua.github.io/tags/github/"/>
    
  </entry>
  
</feed>
